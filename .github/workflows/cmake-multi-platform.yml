# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "ci2" ]
  pull_request:
    branches: [ "ci2" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        # os: [ubuntu-latest, windows-latest]
        os: [windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - { sys: mingw64, env: x86_64 }
          - { sys: mingw32, env: i686 }
          
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          # - os: ubuntu-latest
          #   c_compiler: gcc
          #   cpp_compiler: g++
          # - os: ubuntu-latest
          #   c_compiler: clang
          #   cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          # - os: ubuntu-latest
          #   c_compiler: cl

    steps:
    - name: Install Cygwin Action
      uses: cygwin/cygwin-install-action@v4
      with:
        add-to-path: false
        packages: >-
          cmake
          gcc-core
          gcc-g++

    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2.24.1
      with:
        update: true
        release: false
        msystem: ${{matrix.sys}}
        install: >-
          mingw-w64-${{matrix.env}}-cmake
          mingw-w64-${{matrix.env}}-gcc
          mingw-w64-${{matrix.env}}-ninja
          ${{ matrix.env == 'x86_64' && 'mingw-w64-${{matrix.env}}-mono' || '' }}
    
    - uses: actions/checkout@v4
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ github.workspace }}/build
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DMSYS2_ROOT_DIR=C:/msys64
        -S ${{ github.workspace }}/windows_aio

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ github.workspace }}/build --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ github.workspace }}/build
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
